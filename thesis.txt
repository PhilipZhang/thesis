工学硕士学位论文

你的标题
（国家自然科学基金 (No.XXXXXXXX) 支持）

姓

名：你的姓名

学

号：10XXXXXXXXX

所在院系：电子与信息工程学院
学科门类：计算机科学与技术
学科专业：计算机应用技术
指导教师：你的教授

二〇一三 年 五 月

A dissertation submitted to
Tongji University in conformity with the requirements for
the degree of Master of Science

Your title
(Supported by the Natural Science Foundation of China for
Grant No.XXXXXXXXX)

Candidate:
Tongji Ren
Student Number: 10XXXXXXXXX
School/Department: School of Electrical and Informational Engineering
Discipline:
Computer Science and Technology
Major:
Computer Application Technology
Supervisor:
Prof. XXXXXX

May, 2013

学位论文版权使用授权书
本人完全了解同济大学关于收集、保存、使用学位论文的规定，
同意如下各项内容：按照学校要求提交学位论文的印刷本和电子版
本；学校有权保存学位论文的印刷本和电子版，并采用影印、缩印、
扫描、数字化或其它手段保存论文；学校有权提供目录检索以及提
供本学位论文全文或者部分的阅览服务；学校有权按有关规定向国
家有关部门或者机构送交论文的复印件和电子版；在不以盈利为目
的的前提下，学校可以适当复制论文的部分或全部内容用于学术活
动。

学位论文作者签名：
年

月

日

同济大学学位论文原创性声明
本人郑重声明：所呈交的学位论文，是本人在导师指导下，进行
研究工作所取得的成果。除文中已经注明引用的内容外，本学位论
文的研究成果不包含任何他人创作的、已公开发表或者没有公开发
表的作品的内容。对本论文所涉及的研究工作做出贡献的其他个人
和集体，均已在文中以明确方式标明。本学位论文原创性声明的法
律责任由本人承担。

学位论文作者签名：
年

月

日

同济大学 工学硕士学位论文 摘

要

摘 要
树木建模一直是计算机图形学中一个极具挑战并且非常重要的研究课题。
随着目前WebVR、WebGame、WebGIS等基于Web的应用发展迅速，为了适应网
络的传输以及用户日益增长的对图形效果的追求，如何使树木建模轻量化而富
有真实感就变得尤为重要。传统的3DSMAX、Maya等建模工具不仅耗费人力物
力，而且输出的面片模型也体积庞大，不适合应用到Web领域。而诸如L-System
等基于规则的树木建模又由于其规则性而使树木模型缺失了真实感，这又不能
满足用户对效果的需求。怎样在真实感和轻量化之间进行权衡的问题亟待解
决。
为了解决这个矛盾，本课题提出了一套高效、低成本，的分级轻量化树木
建模方法。这里的分级轻量化体现为其对应用的适应性。即可以基于不同应用
对轻量化的不同要求，在尽可能保证真实感的前提下进行轻量化，以产生最终
符合要求的模型尺寸。这种可分级的轻量化树木建模方法还可以进一步被扩展
为自动适应网络带宽条件或用户硬件条件而自动产生最匹配的轻量化树木模型
的方法。
为了实现高效的分级轻量化建模方法，本文首先将PyrLK光流法进行基于
仿射变换和反向追踪的改进，并且将其运用到三维重建的特征点匹配步骤中，
以提高树木特征点的匹配率和稳定性。然后进行GPU加速的三维重建以得到高
精度点云模型。接着本文运用三维体素泛洪和最小二乘线性拟合的方法对树木
骨架和半径信息进行抽取，以适应树木生长规律的方法抽取出了准确的骨架。
然后本文提出了根据应用对轻量化的需求等级，对骨架进行纵向和横向的合并，
以减小骨架的尺寸来实现轻量化，从而更好地适应面向网络的应用的需求。最
后本文还给出了一套完整的基于图像树木建模的质量评价，提出了还原度的概
念来客观、量化地评价建模出的模型的还原度以及在轻量化过程中质量的丢
失。
关键词：基于图像建模，树木建模，轻量化建模，三维重建，骨架抽取

I

Tongji University Master of Science Abstract

Abstract
Tree modeling has long been a challenging subject in computer graphics. As the
Web-oriented applications(WebVR, WebGame, WebGIS, etc) develop rapidly and the
persuit of graphics eﬀect increases quickly, the lightweight and realism of tree modeling
are badly needed nowadays. The traditional 3d modeling tools such as 3DSMAX and
Maya are not only time and labour consuming, but it takes a large model size, which
are not practical to Web apps. The rule-based modeling such as L-System can solve
the size problem, but its output lacks realism, which is not tolerated by users. So the
balance between realism and lightweight is a real problem which are eagerly demanded
to solve.
In order to solve this problem, a high-eﬃciency, low-cost and lightweightclassiﬁed tree modeling method is proposed. Here the lightweight-classiﬁed means it
can produce diﬀerent lightweight levels of tree models. And to implement this goal,
this method will reduce model size on the premise of not losing much realism. This
method can also be applied furthur to automatically adapt to the bandwidth and hardware conditions of the client side.
For implementing the lightweight method, we ﬁrst improve the traditional PyrLK
optical ﬂow method to support aﬃne transformation and backward feature tracking,
which can furthur be applied to do feature matching in gpu accelerated 3D reconstruction and improve the match ratio. Then we use ﬂooding algorithm in 3D voxel model
and least squares method to discover the tree skeleton and its radius information. According to the lightweight level the applications require, we reduce the model size by
merging the branches vertically and horizontally respectively. At last we propose a
modeling quality evaluation method, which will objectively and quantizedly evaluate
the restore degree of the tree model.
Key words: Image-based Modeling, Tree Modeling, Light-weight Modeling, PyrLK
Optical Flow, Skeleton Extraction

III

同济大学 工学硕士学位论文 目录

目录
第 1 章 引言 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

1.1 背景介绍 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

1.2 课题的主要工作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

第 2 章 树木建模的研究综述 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3

2.1 虚拟树木建模技术 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3

2.2 现实树木重建技术 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.3 本章小节 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5

第 3 章 基于图像的树木轻量化3D建模方法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

3.1 技术路线 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

3.1.1 基于改进的PyrLK光流法的图像特征匹配 . . . . . . . . . . . . . . . . . . . . . . . .

6

3.1.2 三维重建 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

3.1.3 基于三维体素泛洪与线性拟合的三维树木骨架抽取 . . . . . . . . . . . . . .

6

3.1.4 基于用户交互的模型改善与轻量化 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

7

3.1.5 建模质量评估. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

7

3.2 技术路线图 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

8

第 4 章 基于图像树木轻量化建模的若干算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

9

4.1 基于改进的PyrLK光流法的特征点匹配方法 . . . . . . . . . . . . . . . . . . . . . . . . . .

9

4.1.1 光流法简介 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

9

4.1.2 PyrLK光流算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
4.1.3 改进的PyrLK光流算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
4.1.3.1 加入放射变换 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .11
4.1.3.2 提高鲁棒性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .12
4.2 基于三维体素泛洪与线性拟合的三维树木骨架抽取 . . . . . . . . . . . . . . . . . . 12
4.2.1 三维体素模型. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
4.2.2 三维体素泛洪确定邻域范围 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
4.2.3 通过最小二乘法线性拟合确定分支 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
4.2.4 获取骨架半径. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18

IV

同济大学 工学硕士学位论文 目录

4.3 基于枝干合并的轻量化处理 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
4.3.1 L-System的尝试 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
4.3.1.1 L-System简介 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .20
4.3.1.2 树木模型的参数化L-System规则抽取 . . . . . . . . . . . . . . . . . . . . . . . . . . . .20
4.3.1.3 使用L-System进行树木轻量化建模遇到的问题 . . . . . . . . . . . . . . . . .21
4.3.2 树木轻量化？枝干合并！ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
4.4 建模还原度 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.4.1 图像序列信息量 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.4.2 三维重建还原度 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
4.4.3 骨架抽取还原度 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
4.4.4 建模还原度计算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
4.5 本章小节 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
第 5 章 实验过程与分析. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
5.1 实验环境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
5.2 实验结果与分析 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
5.3 本章小节 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
第 6 章 总结与展望 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
6.1 总结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
6.2 未来的工作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
参考文献 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43

V

第 1 章 引言

第 1 章 引言

1.1 背景介绍
在互联网飞速发展的今天，网络应用已经延伸到生活的方方面面。微博、
人人网、在线购物、在线音乐等已经成为当今人们生活的一部分。面向Web的
虚拟现实应用如WebVR、WebGame、WebGIS等也必然将成为虚拟现实发展的
重要方向。树木作为自然界常见的事物，在各种虚拟现实的场景中出现的频率
很高。然而树木形态各异，结构复杂，给3D建模带来了很大的难度。通常单棵
树的数据量已经不小，对于构建一个树木的聚集场景(如森林)就更加庞大，这
容易使得场景负荷变大而产生延迟。因此，树木建模的质量和效率将直接决定
面向Web的虚拟现实应用的成败。
目 前 的 树 木 的3D建 模， 主 要 是 通 过 专 业 的3D建 模 工 具(3DSMAX、
Maya等)进行手工建模。这种建模方法对建模人员的要求较高，并且需要的
时间长。而且这种方法通常最终生成的是面片信息，要表达一棵形态复杂的树
木需要大量的顶点信息，导致最终生成的模型体积较大，对于需要大批树木的
场景，负荷就会变得更大。
目前树木的轻量化建模，从最简单的基于分形，广告牌技术的建模到稍微
复杂的基于规则的建模，都存在一个共同的问题，就是在轻量化的同时，很大
程度上舍弃了模型的真实感和树木本身的形态特征。随着当今应用对真实度要
求的升高，这类轻量化的建模方法已经不能完全满足需求。真实感与轻量化之
间的权衡也成为了当今应用需要考虑的一个重要因素。
本课题基于以上的考虑，从基于图片对树木结构进行完整的恢复，到面向
应用需要对真实感与轻量化进行人工控制，到最后模型重建质量的评估，给出
了一套完整的解决方案。

1.2 课题的主要工作
本课题的主要工作有：
1. 对PyrLK光流法进行改进，使其适用于仿射变换的特征匹配，并增加反

1

同济大学 工学硕士学位论文 你的标题

向追踪提高算法鲁棒性。将其运用于三维重建算法中的特征点匹配步骤，使树
木重建的模型更加准确和精细。
2. 提出了基于三维体素泛洪和线性拟合的树木骨架抽取方法。该方法区别
于传统的3D瘦化骨架抽取方法，它只适用于具有分形结构的3D骨架，所以更能
够准确的抽取出树木的骨架。
3. 提出了基于用户交互对树木模型进行完善和轻量化，让最终的应用来决
定其所需的树木模型，避免了主观的一味轻量化或一味追求真实感而带来的需
求矛盾，将模型的成型延迟至具体的应用。
4. 提出了基于图像的树木重建质量评估方法，对于重建出来的树木模型进
行了客观和量化地质量评估，计算出其还原度。

2

第 2 章 树木建模的研究综述

第 2 章 树木建模的研究综述
树木的建模和造型技术，是计算机图形领域颇具挑战性的研究方向之一。
自上世纪六十年代起，大批国内外的研究工作者利用各种不同的方法和技术来
构建树木的形态，大大地推进了树木建模技术的发展。目前，在树木的建模领
域，主要存在两种不同的类别：虚拟树木建模和对真实世界的树木进行重建。

2.1 虚拟树木建模技术
虚拟树木建模主要是指所建模的树木对象并不是直接从现实生活中获取，
而是根据一定的规律或生长机理模拟化地对树木进行建模，树木的结构等都是
通过过程化的方法所生成，而非从点云中抽取。
一 个 虚 拟 树 木 建 模 的 经 典 方 法 是 由Lindenmayer于1968年 提
出 的L-System [1] ， 它 是 一 个 “字 符 串 重 写 系 统” 后 在90年 代 初，
，
Prusinkiewicz与Lindenmayer一 起 将L-System规 则 系 统 用 于 描 述 树 木 的 生 长 过
程 [2,3] 。它用语法表达了植物的生长规则，加入了分枝角度、长度等信息，以便
于植物的表达与生长。在此后以L-System为基础的研究工作中，部分研究人员
用若干几何模型构建出植物的枝干，并且引入不同的参数来表示植物的生长。
另一部分研究人员使用分形的方法来进行树木建模。近几年来，L-System的方
法常常以用户勾画为引导，让用户在简便操作的前提下设定L-System的参数，
从而构建出树木模型，Okabe在2006年，Anastacio在2009年 [4] 都在这方面作出了
贡献。2010年，Hongchun Qu使用BHA自动机和马尔科夫方法自动化地从输入
图像中提取了L-System 规则，在自动化提取规则方面迈出了第一步。
虚拟树木建模的另一个研究领域是AMAP系统 [5] 。该系统通过观察植物的
结构，对植物形式和结构获得定性地理解，然后定量的测量植物形态的数据。
植物的生长有一定的随机性，通过概率分布和应用理论来表达随机过程。系统
依靠强大的实地数据采集和分析模块，将植物的各项测量数据整合到植物数据
库，植物的拓扑结构演化由马尔可夫过程进行分析获得。再通过模式识别方法
分析数据中提取生长规则的类型来构造植物的几何形状，应用蒙特卡罗的方法
仿真模拟植物的模型，再应用几何的方法来表达其形成规律，并由此制作模型
参数表，最后在场景中生成植物的图形。

3

同济大学 工学硕士学位论文 你的标题

2.2 现实树木重建技术
现实树木重建是指从现实生活中通过照片，视频或者三维扫描，来获得树
木的实际数据，通过一系列重建的方法来对树木的几何，物理信息进行复原的
过程。
基于图像的树木建模技术，是以在现实中拍摄的树木的图片作为为输
入，然后根据图片附带的树木信息重建出树木结构的技术。2004年，RecheMartinez以空间体素的形式重建出了照片中的树 [6] 。 2007年，Neubert不仅近
似的生成了空间体素，而且还进一步以3D粒子流的方法来模拟生成了细枝
和枝干 [7] 。该方法将树木上的点看作吸引子，以物理的吸引力等概念重建出
了树木的信息，十分新颖。图片同样可以用来抽取L-System规则，对于树冠
密集的树木，Shlyakhter在2001年首次从图片中抽取出了可见部分的规则，然
后运用L-System进行处理。对于树叶占据大部分区域的树木图像，香港科技
大学学者权龙在2006年，用交互式勾画辅以稀疏3D重建的方法，很好的恢复
了树木的信息 [8] 。而对于树干信息占据大部分区域的树木图像，谭平又分别
在2007年和2008年，用自动化L-System和用户交互L-System 的方法完成了树木
的重建 [9,10] 。2010年，Luis D.Lopez等人提出了一种从稀疏图像序列重建无叶树
木的方法。2011年，Chuan Li等人提出了一种从树木视频输入重建树木模型的
方法 [11] 。这两种方法均先从图像中获取2D树木骨架，然后对2D树木骨架序列
进行三维重建获得三维骨架。由于树木图像本身存在遮挡导致2D树木骨架无法
准确抽取，从而影响3D树木骨架的生成，因此这两种方法还原度都比较低。
基于激光扫描仪的体素化模型生成技术，是一种更直接地现实树木重建技
术。它利用激光的单色性好、方向性强、能量高、光束窄等特点，直接对树木
进行激光扫描，从而得到非常密集的点云数据。大多数基于激光扫描仪的方法
都将重点放在了恢复代表枝干的骨架上，因为扫描出的叶子的点云含有太多噪
声，以致无法准确重建其信息。1999年，Lazarus和Verroust用生成树的边长来聚
合点云，从而获取骨架 [12] 。 Bucksch在2008年和2009年将点云分块到八叉树表
示的格子，然后用相邻格子间的连线来模拟骨架的曲线 [13] 。 2007年Xu用启发
式的方法来从扫描的点云中重建树木的主干，然后再用人工合成的办法在其上
添加细枝和叶子 [14] 。 Cˆ te在2009年同样用人工合成的方式去构建细枝和树叶，
o
但是他对光照散步的合成是通过在扫描的时候进行采样 [15] 。
综上所述，基于L-System的方法虽然轻量化，但是其试图用少量的规则来
刻画自然中本就不规则生长的复杂的树木，导致了真实感的缺乏，同时在一个
复杂结构中抽取L-System本身也是带有人为主观性和二义性的。基于AMAP系
4

第 2 章 树木建模的研究综述

统的树木建模，虽然其建模的还原度较高，但是它需要大量的数据采集和专业
的植物学知识，这对于一般性的应用来说显得超负荷。对于目前的基于图像的
建模技术，如何准确的进行三维重建和骨架恢复仍然是一个难点。而基于激光
扫描仪的树木建模，设备的价格又太高昂，而且对于骨架的抽取仍有一定的二
义性存在。
为了解决这些问题，弥补现有方法的局限，本课题结合现有方法的优点，
改进其不足，提出了一整套基于多张图像的树木轻量化建模的解决方案。该方
法较好的综合了真实感与轻量化。

2.3 本章小节
国内外学者们多年来通过各种不同的技术和思想对树木建模的发展作出了
卓越共享，也为后续工作者的研究奠定了坚实的基础。本章首先简要介绍了两
大类树木建模的领域，即虚拟树木建模与现实树木重建。然后通过总结这两大
领域中的已有方法，从规则生成，植物学领域，三维重建，骨架抽取等角度思
考了树木建模问题。在本章最后部分对比和分析了各种方法的特点和不足，为
提出改进方案做好了准备。

5

同济大学 工学硕士学位论文 你的标题

第 3 章 基于图像的树木轻量化3D建模方法

3.1 技术路线
本文提出了一套完整的基于图像的树木轻量化3D建模的方法。该方法首先
以树木图片序列作为输入，用经过改进的方法对树木进行三维重建，使三维重
建得到的模型精确度和完整性都得以提高。然后再用基于空间方向迭代和步长
探索的方法抽取树木的骨架，最终再基于用户交互对骨架进行改善与轻量化。
该技术路线旨在实现一个对建模设备和条件要求不高，适用于一般应用的
方法。在方便和简单的基础上，尽可能多的加入自动化，并结合少量用户交互，
以实现高效、精确的树木轻量化3D建模。
该方法的主要步骤如下：

3.1.1

基于改进的PyrLK光流法的图像特征匹配

本文首先将著名的金字塔LK光流法(PyrLK)进行了改进和扩展，使本来以
平面平移作为运动假设的PyrLK光流法扩展为以平面仿射变换为运动假设，这
样便能在两帧以空间角度旋转而拍摄的图片中，捕捉到空间旋转变换的投影，
提高了匹配的完整性和正确性。之后本文再将得到的匹配点进行反向匹配，只
有在一定容错区间内的匹配点对才会被接纳，以提高匹配算法的鲁棒性。

3.1.2

三维重建

特征匹配完成以后，本文使用了美国华盛顿大学西雅图分校Changchang
Wu的可视化运动恢复工具VisualSFM来完成基于多张图片的树木三维重建。
VisualSFM实现了SiftGPU(GPU加速) 和多核的捆集调整(Multicore Bundle Adjustment), 使得相机参数的恢复更加快速和精确。在这个步骤本文用经过改进
的PyrLK光流法的匹配结果替换VisualSFM中的 SIFT特征点匹配文件，进一步地
改进了相机参数恢复的准确度和可信度。

3.1.3

基于三维体素泛洪与线性拟合的三维树木骨架抽取

在完成了三维重建之后，将会得到一个比较完整的树木空间点云模型。本
6

第 3 章 基于图像的树木轻量化3D建模方法

文根据该点云的空间分布，并结合树木自底向上的自然生长规律和分形的逻辑
结构特征，在阈值范围内，进行三维的体素泛洪，同时向多个子方向进行迭代，
不断增加步长来扩大邻域范围。在确定邻域以后将几个点数比例较大的方向作
为分支方向，并用线性拟合的方法确定其精确的分支方向。同时在迭代过程中
及时剔除已经形成枝干的点云，来加速泛洪算法的完成。最终获取到的骨架信
息是含有父子关系的节点信息，相比起3DSMAX等手工工具导出的面片模型，
这种逻辑结构的模型大大的减小了其尺寸，但是由于逻辑结构并没有多少丢失，
所以极具真实感。并且这种结构更便于后续的处理和进一步轻量化。

3.1.4

基于用户交互的模型改善与轻量化

由前面方法所得到的树木三维骨架虽然已经是含有父子信息的树木逻辑结
构，但是由于前面的步骤都是自动化生成，所得到的结果不可能100%地保证符
合具体应用的需求。并且前面的骨架信息虽然比起用面片来表示树木模型已经
大大的轻量化了，但是针对实际的应用，本文还可以根据用户的交互来合并分
支，从而进一步对模型进行轻量化，以适用于轻量化要求更高的应用。

3.1.5

建模质量评估

对于一个通过建模获得的树木模型，如果没有一个客观的量化评价指标，
就无法从客观的角度反馈树木模型的还原度和各个步骤算法的可行性。本文提
出了建模还原度的概念，以模型重建的还原度来量化的表现建模的质量。该还
原度分别计算输入图像序列的信息量、三维重建的还原度和骨架抽取的还原度。
并将它们有机地结合起来形成了最后总的建模还原度。

7

同济大学 工学硕士学位论文 你的标题

3.2 技术路线图

图 3.1 技术路线图

8

第 4 章 基于图像树木轻量化建模的若干算法

第 4 章 基于图像树木轻量化建模的若干算法

4.1 基于改进的PyrLK光流法的特征点匹配方法
基于图像的树木建模第一步是三维重建，而三维重建的第一步则是特征点
的匹配。所谓的特征点匹配，是在多张图片中找到空间同一个点在其上的投影
位置，从而为三维重建的后续步骤提供数据支持。这里的特征点，本文选择了
具有平移和旋转不变性的 Harris角点，以便用已有的方法快速找出图片中的特
殊位置点。然后再结合改进的PyrLK光流法，对找到的Harris角点进行3D匹配，
这里的匹配不只是一般地基于邻域平移假设的匹配，而是支持平面仿射变换假
设的匹配，并且对在容错区间以外的匹配结果进行了剔除，保证了匹配的精确
性和可信度。最后本文将匹配的结果存储到匹配文件以供后续使用。

4.1.1

光流法简介

光流的概念最早是由James Gibson提出的。1981年，Horn和Schunck创造性
地将二维速度场和灰度联系起来，提出了一种有效的光流计算方法 [16] 。基于亮
度不变的假设，图像灰度分布的变化由背景或目标的运动引起，背景或目标的
灰度不随时间变化。在这种假设中，光流法通过目标和背景的不同速度来检测
运动目标。
进一步说，将三维空间中的目标和场景对应于二维图像平面运动时，他们
在二维图像平面的投影就形成了运动，这种运动以图像平面亮度模式表现出来
的流动就称为光流(Optical Flow)。也就是说，光流是空间运动物体在观测成像
面上对应像素点运动的瞬时速度，这个速度在图像中以每秒像素点的位移个数
来衡量，它巧妙地运用2D的灰度变化来表征3D物体的位置和结构变化。而光流
场(Optical Flow Field)就是所有光流点的集合，是一个2D瞬时速度场。光流场能
够表征整个图像的位移变化，从而对3D运动目标进行检测和跟踪。
在光流法提出以后，很多学者对其进行了研究和改进，并且它们的方法各
具特点，算法性能和运用场景各异。其中颇具代表性的是Lucas-Kanade局部平
滑法(LK光流法) [17] ，它用基于微分的方法，利用时变图像灰度的时空微分来
计算速度矢量，并且加以图像平滑处理，来进行光流跟踪。后来在2000年JeanYves又提出的基于图像金字塔实现的LK光流法，称为PyrLK光流法 [18] 。
9

同济大学 工学硕士学位论文 你的标题

4.1.2

PyrLK光流算法

假设图片上的像素点的值函数为I(x, y, t)，表示坐标位于(x, y)的像素点在时
刻t的像素值为I(x, y, t)。那么经过∆t时间后，像素值将变为I(x +∆x, y+∆y, t +∆t)。
有如下推导：

I(x + ∆x, y + ∆y, t + ∆t) = I(x, y, t) +
=⇒
=⇒

∂I
∂I
∂I
∆x + ∆y + ∆t
∂x
∂y
∂t

∂I
∂I
∂I
∂x ∆x + ∂y ∆y + ∂t ∆t = 0
∂I
∂I
∂I
∂x V x + ∂y Vy + ∂t = 0

=⇒ I x V x + Iy Vy = −It

(4.1)

Lucas-Kanade光流法算法基于以上原理，并假设两帧图像之间发生的位
移是微量的，而且在一个点的邻域内这个位移量是常数。这样可以对一个
以p点为中心的窗口内的像素点写出一个光流方程组，表征局部图像的运动向
量(V x , Vy )需要满足以下方程组：
⎧
⎪ I (q )V + I (q )V = −I (q )
⎪ x 1 x y 1 y
⎪
t 1
⎪
⎪
⎪
⎪
⎪ I (q )V + I (q )V = −I (q )
⎪ x 2 x y 2 y
⎪
t 2
⎨
⎪
.
⎪
⎪
.
⎪
.
⎪
⎪
⎪
⎪
⎪
⎪ I (q )V + I (q )V = −I (q )
⎩ x n x y n y
t n

(4.2)

这里的q1 , q2 , ..., qn 是局部窗口内的点，I x (qi ), Iy (qi ), Iz (qi )是图片I对x, y, t的偏
导函数在qi 处的值。将其写为矩阵形式得：
⎛
⎜ I x (q1 ) Iy (q1 )
⎜
⎜
⎜
⎜
⎜
⎜
⎜ I x (q2 ) Iy (q2 )
⎜
⎜
⎜
A=⎜ .
⎜
⎜ .
.
⎜ .
.
⎜
⎜
.
⎜
⎜
⎜
⎜
⎝
I x (qn ) Iy (qn )

⎞
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟,
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎠

⎛
⎞
⎜ V ⎟
⎜ x ⎟
⎟
⎜
⎟
⎟
⎜
v=⎜
⎜
⎟
⎜
⎝ V ⎟,
⎠
y

⎛
⎜ −It (q1 )
⎜
⎜
⎜
⎜
⎜
⎜
⎜ −It (q2 )
⎜
⎜
⎜
b=⎜
⎜
⎜
.
⎜
.
⎜
⎜
.
⎜
⎜
⎜
⎜
⎝
−It (qn )

⎞
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎠

(4.3)

这个方程组的方程个数远远多于未知数，所以A是过约束的，LK光流法运
用最小二乘法来求解出其光流速度。最小二乘法可以参考4.2.3或查阅相关资
料。
LK光流法虽然比较直观，但是存在一个问题，由于能够探测到的运动块
的大小和所选窗口的大小呈正相关，为了能够捕捉到大像素块的运动，需要将
10

第 4 章 基于图像树木轻量化建模的若干算法

窗口大小相应调大。但是窗口大小越大，速度就需要在越大的邻域内保持稳
定，就越不符合光流在小范围内稳定的假设。基于金字塔的LK光流法是LucasKanada方法的一种改进版实现，它解决了窗口大小的与大块运动捕捉的矛盾。
其具体思想如下：
设I和J是两张灰度图片，I(x)和J(x)分别表示图片I和J在位置(x, y)处的灰度
值。现考虑图片I上的一点u = (u x , uy )，特征追踪的目标就是找到图片J上的一
点v = u + d = (u x + d x , uy + dy )，使得I(u)和J(v)“相似”
。其中向量d = (d x , dy )表
示图片在点x处的光流速度。下面来定义基于邻域的相似，设ω x 和ωy 是两个整
数，将使得下面式子最小化的向量d定义为光流速度：

(d) = (d x , dy ) =

u∑︁x
x +ω

u∑︁y
y +ω

(I(x, y) − J(x + d x , y + dy ))2 .

(4.4)

x=u x −ω x y=uy −ωy

其中邻域窗口大小为(2ω x + 1) × (2ωy + 1)。式子的含义为寻找向量d使得 u和v在
邻域窗口大小内的差异最小化。
然后该方法将图像金字塔化，即将原图像作为最高分辨率层，逐步降低图
像的分辨率，并作为新的一层，加入到 LK光流法的迭代序列。通过这样多分辨
率图层，使得邻域窗口的大小在低分辨率图像对应的区域可以映射到高分辨率
图像的更大的像素区域，从而支持了大块运动。

4.1.3

改进的PyrLK光流算法

4.1.3.1 加入放射变换

对于PyrLK光流算法，已经能够很好的解决几乎任何像素块大小由平移主
导的匹配。然而，这并不足以完美地解决树木上点的匹配问题。因为相邻的两
帧图像要求在空间形成一定的夹角进行拍摄，这样在两帧图像上，也一定会产
生由空间旋转投影过后带来的平面旋转。而这样的变换在PyrLK光流算法里是
无法解决的，因为PyrLK 只是简单的将点的匹配依赖于点的平移。所以，有必
要对PyrLK光流算法进行由平移变换到放射变换的扩展。
假设两个点的匹配满足仿射矩阵A，那么有:
⎞ ⎛
⎛
⎜ ∆x′ ⎟ ⎜ a11 a12 a13
⎟ ⎜
⎜
⎜
⎟ ⎜
⎜
⎟ ⎜
⎜
⎟ ⎜
⎜
⎜
⎟ ⎜
⎟ ⎜
⎜ ∆y′ ⎟ = ⎜ a21 a22 a23
⎜
⎟ ⎜
⎜
⎟ ⎜
⎟ ⎜
⎜
⎜
⎟ ⎜
⎜
⎟ ⎜
⎝
⎠ ⎝
0
0
0
0

11

⎞
⎞ ⎛
⎟ ⎜ ∆x ⎟
⎟
⎟ ⎜
⎟ ⎜
⎟
⎟ ⎜
⎟
⎟ ⎜
⎟
⎟ ⎜
⎟·⎜
⎟
⎟
⎟ ⎜ ∆y ⎟
⎟ ⎜
⎟
⎟ ⎜
⎟
⎟
⎟ ⎜
⎟ ⎜
⎟
⎟ ⎜
⎟
⎠ ⎝
⎠
1

(4.5)

同济大学 工学硕士学位论文 你的标题

将其代入式4.1得：
⎛
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
(a11 a12 a13 a21 a22 a23 ) · ⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎝

∂I
∂x ∆x
∂I
∂x ∆y
∂I
∂x
∂I
∂y ∆x
∂I
∂y ∆y
∂I
∂y

⎞
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟ = −I
⎟
⎟
t
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎠

(4.6)

运用最小二乘法可以得到A的解。
将PyrLK中的定义式4.4稍作修改可可使得其支持仿射变换：

Let

a1 = (a11 , a12 , a13 )

(d) = (d x , dy ) =

u∑︁x
x +ω

a2 = (a21 , a22 , a23 )

u∑︁y
y +ω

b = (d x , dy , 1)

(I(x, y) − J(x + a1 · b, y + a2 · b))2 .

(4.7)

x=u x −ω x y=uy −ωy

4.1.3.2 提高鲁棒性

本文前面几个小节一直在探讨如何改进和完善匹配的方法，从而提高精度
和匹配可信度。然而，这其中有一个问题，单方向的去追踪匹配点是否就能确
定该两个匹配点真正的匹配呢？其实不然，要确定两个点完全符合之前算法
描述的特点，还需要反向进行检查，看u和v之间的匹配是否是双向和可逆的。
换句话说，本文之前定义的“相似”其实是单方面的u相似于 v，而v是否相似
于u还不得而知。因此，考虑到算法的完整性和鲁棒性，有必要进行反向的匹配
来确定它们完全匹配。或者退一步，给出一个容错的区间，定义当差异度小于
多少时，两个点“相似”
。本文采用后一种容错的机制。算法表1给出了经过添
加仿射变换支持和提高鲁棒性的PyrLK 光流法算法的伪代码：

4.2 基于三维体素泛洪与线性拟合的三维树木骨架抽取
在获取了精确的点云模型之后，出于后续轻量化的考虑，需要将模型的存
储方式由密集的点云转化为逻辑的父子结构。用树形的数据结构来表达现实的
12

第 4 章 基于图像树木轻量化建模的若干算法

Algorithm 1 支持仿射变换和容错机制的PyrLK光流法
Input: 图像I,J,图像I中的点u,容错阈值µ
Output: 图像J中对应点v
1:

构建图像I和J的金字塔表示: {I L }L=0,...,Lm 和{J L }L=0,...,Lm

2:

L
初始化金字塔估计值: gLm = (gLm , gy m ) = (0, 0)
x

3:

for L = Lm to 0 with step of -1 do

4:

定位图像I L 上的点uL : uL = (u x , uy ) = u/2L

5:

设a1 = (a11 , a12 , a13 )

6:

定义相似度：

a2 = (a21 , a22 , a23 )
u∑︁x
x +ω

(d ) = (d x , dy ) =
L

u∑︁y
y +ω

(I(x, y) − J(x + a1 · b, y + a2 · b))2 .

x=u x −ω x y=uy −ωy

7:

最小二乘法估计出d L ，使得 达到最小值

8:

L-1层金字塔估计值: gL−1 = 2(gL + d L )

9:

end for

10:

最终光流向量: d = g0 + d0

11:

v=u+d

12:

将v作为输入点求出对应点u′

13:

if Distance(u, u′ ) < µ then

14:
15:
16:
17:

return v
else
return NULL
end if

13

L L
b = (d x , dy , 1

同济大学 工学硕士学位论文 你的标题

树结构，这是很自然的想法，相对于面片结构，树形结构也是一种更为轻量化
的存储方式。每个节点表示树枝的起点，存储着该节点的空间位置，半径和该
节点的父子枝信息以及兄弟信息。一个节点和它的一个子节点形成一个空间线
段，若干空间线段组成一条连续的树枝。
本文从树的生长规律入手，从根节点往子节点生长。生长的依据则为当前
节点所在邻域内的空间点云分布，节点邻域大小由步长来控制，步长会探索式
地递增，直到达到了增长的阈值，邻域大小才确定下来。然后从其点云分布拟
合出各个分支的方向，从而生长出新的子节点，并递归地生长下去直到点云的
边界。

4.2.1

三维体素模型

前面三维重建步骤得到的结果是一个点云模型，该模型中的点数量庞大，
不适于后续的邻域搜索，因此我们需要对点云进行体素化处理。所谓体素化，
就是将点云占据的空间划分成一个个的小立方体，每一个立方体称之为一个体
素。
在将点云模型转化为体素模型以后，对于点云的邻域搜索便转化为了对于
空间临近体素的搜索，体素的位置就反映了点集的位置，因此不用每次搜索都
遍历整个点云，而是只用将步长范围体素中的点集遍历即可。由于体素是我们
处理的基本单位，所以体素的大小也直接决定了体素模型的精度，因此，在确
保非空体素的空间连续性和效率允许的基础上，本文建议让体素尽可能的小，
以保证模型的精度。将点云模型转换为体素模型的伪代码在算法表2中给出。
insertplace...图片。 。
。

4.2.2

三维体素泛洪确定邻域范围

在确定了三维体素模型以后，便需要从根到叶，自底向上地对树的骨架结
构进行生长。生长的依据是已经得到的体素模型，将体素模型中点的分布作用
于骨架的分支，便可以张成骨架模型。
具体方法是将根节点置为当前节点，对其进行三维泛洪，首先对其相邻
的27个体素进行泛洪，若体素不为空，则将其加入邻域范围，若为空，则停止
向该方向进行迭代。同时将加入邻域范围的体素置为无效，表示其已经参与了
泛洪，不再参与骨架的重建，这样不仅可以对算法的结束有一个很好的约束条
件，同时也可以减少重复处理的次数，加快算法的完成。然后进行下一次迭代，

14

第 4 章 基于图像树木轻量化建模的若干算法

Algorithm 2 点云模型体素化
Input: 点云模型M
Input: 体素维度d
Output: 三维体素数组V[1..d, 1..d, 1..d]
1:

初始化点云边界值Xmax = Ymax = Zmax = MIN
MAX

2:
3:

FLOAT, Xmin = Ymin = Zmin =

FLOAT

for all 空间点P(P x , Py , Pz ) ∈ M do
CheckBoundary(P)

4:

end for

5:

for all 空间点P(P x , Py , Pz ) ∈ M do

6:

Vx =

7:

Vy =

8:

Vz =

9:

V[V x , Vy , Vz ] = V[V x , Vy , Vz ]

10:

P x −Xmin
Xmax −Xmin · d
Py −Ymin
Ymax −Ymin · d
Pz −Zmin
Zmax −Zmin · d

⋃︀

{P}

end for

对新加入的体素进行27方向的泛洪，并把有效的体素加入到邻域范围。接着比
较两次迭代体素增加的比例，如果低于设置的阈值，则停止迭代，当前的邻域
范围即为三维泛洪得到的当前节点的邻域范围。
图4.1展示了三维体素泛洪确定邻域的步骤。4.1(a)为其初始状态，即邻域范
围为当前体素。其中橙色的区域表示邻域范围，蓝色的区域表示未探索区域，
灰色区域表示空的体素，而绿色区域表示已经在之前的枝干邻域。4.1(b)表示体
素泛洪经过一次迭代以后的状态，因为体素泛洪只会对与当前邻域范围相邻的
未探索区域(蓝色方块)进行扩展，所以4.1(a)只会向黄色箭头指向的体素进行扩
展，从而得到4.1(b)。在得到新的邻域后，首先会计算所新增的点的数量与之前
的数量的比值有没有低于阈值，如果低于阈值，则停止邻域的扩张。最后将得
到4.1(c)中的邻域范围。
三维体素泛洪确定邻域范围算法的伪代码在算法表3中给出。
在进行三维泛洪的时候，可以编程实现27个方向迭代过程的并行化，以提
高算法的效率。

15

同济大学 工学硕士学位论文 你的标题

(b) 第 一 次 泛 洪 迭
代(邻 域 范 围 为6个 体
素)

(a) 初 始 状 态(邻 域 范
围为1个体素)

(c) 第 二 次 泛 洪 迭
代(邻域范围为11个体
素)

图 4.1 体素泛洪示意图

Algorithm 3 三维体素泛洪确定邻域范围
Input: 当前体素C，三维体素数组V[1..d, 1..d, 1..d]，泛洪方向数组D[1..27]，邻
域范围增长比例阈值λ
Output: 邻域范围内体素集合S
1:

初始化单次迭代新增体素集合S′

2:

S′ .AddVoxel(根节点所在体素)

3:

for all 泛洪方向Direction ∈ D do

4:
5:
6:

NewIndex = C.Index + Direction
NewVoxel = V[NewIndex.x, NewIndex.y, NewIndex.z]
⋂︀
if NewVoxel非空 NewVoxel有效 then
S′ .AddVoxel(NewVoxel)

7:
8:
9:

end if
end for

10:

体素增长比例µ =

11:

S′ .VoxelCount
S.VoxelCount

if µ > λ then

12:

for all voxel ∈ S′ do
把voxel作为当前体素进行递归调用

13:
14:

end for

15:

end if

16:

return S

16

第 4 章 基于图像树木轻量化建模的若干算法

4.2.3

通过最小二乘法线性拟合确定分支

当得到邻域范围以后，便得到了邻域内体素在基于当前节点27个方向上的
密度分布，而每个体素内又包含着若干的点，因此等于是得到了在当前节点邻
域内的点云分布情况。接下来的工作就是怎样从各个方向的点云的分布情况抽
取出核心的骨架。本文应用线性拟合的方法来从密集的点中抽取出一条线段，
作为该部分的骨架。
该方法首先要剔除掉那些点云密度很小的方向，以免每个节点都朝各个方
向长出一些细碎的枝条。因为这些细碎的枝条就算在此步中不剔除，到后续的
轻量化的时候也不容许它们的存在。
然后对于剩下的若干方向d1 , d2 ...dk ，每个方向都对应着树木的一个骨架。
在处理某个方向di 时，将其包含的体素中的所有点抽取出来，得到一个密集的
点集S i 。然后采用待定方程的办法，设直线方程为：
x = x0 + dt,

(t ∈ [0, ∞))

(4.8)

其中x0 是当前节点的坐标，d是待拟合的直线方向。我们假设点集S i 中的
点P1 , P2 , ...Pm 都在直线上，则可以得到以下方程组：

⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎩

a11 d x + a12 dy + a13 dz = b1
a21 d x + a22 dy + a23 dz = b2

(4.9)

...
an1 d x + an2 dy + an3 dz = bn

其中具体数值未给出，注意这里的n = 3m，因为每个点P可以提供三个方向
的方程式。在这个方程组中，令
⎛
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
U=⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎝

⎞
⎟
a11 a12 a13 ⎟
⎟
⎟
⎟
⎟
⎟
⎟
a21 a22 a23 ⎟
⎟
⎟,
⎟
⎟
⎟
⎟
... ... ... ⎟
⎟
⎟
⎟
⎟
⎟
an1 an2 an3 ⎠

⎞
⎛
⎜ dx ⎟
⎟
⎜
⎟
⎜
⎟
⎜
⎟
⎜
⎜
⎟
⎜
⎟
⎜ dy ⎟ ,
d=⎜
⎟
⎜
⎟
⎟
⎜
⎟
⎜
⎟
⎜
⎠
⎝
dz

⎛
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
b=⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎝

⎞
⎟
b1 ⎟
⎟
⎟
⎟
⎟
⎟
⎟
b2 ⎟
⎟
⎟
⎟
⎟
⎟
⎟
... ⎟
⎟
⎟
⎟
⎟
⎟
bn ⎠

在实践中，由于筛选方向上的点数较多且发散分布，由线性代数的理论知，
U是过约束的，即n > r,其中r是矩阵U的秩。这种情况下没有标准的解，只能找
到使误差最小的向量d，误差定义为:

17

同济大学 工学硕士学位论文 你的标题

de f

E ===
==

n
∑︁

(dti − xi + x0 )2 = |Ud − b|2

(4.10)

i=1

由于E正比于方程的均方误差，因此只要E达到最小值，那么点集相对于该
直线的波动就最小。换句话说，也就是该直线最好的模拟了该点集所表示的骨
架。由线性代数的方法很容易可以解得d = [(UT U)−1 UT ]b。图4.2展示了由当前
节点(蓝色节点)分别向两个点云集合拟合出的两条直线(红色线段)，这两条直线
将被作为两个分支的方向。从图中可以看出线性拟合的方法可以很好的估计出
树木分枝的方向，从而准确的恢复出树木的父子结构。

图 4.2 线性拟合计算分支方向

算 法 表4中 给 出 了 得 到 邻 域 信 息 后 进 行 骨 架 抽 取 的 伪 代 码，其 中Least
Squares Processing表示运用最小二乘法进行线性拟合。

4.2.4

获取骨架半径

树木骨架的半径对树木模型的真实感有着十分显著的贡献，所以尽可能准
确的获得骨架的半径信息能够有助于重建出极具真实感的树木模型。对于树木
半径的获取方法也有许多，主要分为根据规则生成半径和从树木点云结构中获
取半径两种方式。
对于基于规则来生成半径，最简单的方法是对树木半径进行线性地递
18

第 4 章 基于图像树木轻量化建模的若干算法

Algorithm 4 基于邻域的骨架抽取
Input: 当前节点体素V
Input: 骨架方向数组D[1..n]
Output: 当前节点子节点集合S
1:

for all 骨架方向d ∈ D do

2:

NewChild ← LeastS quaresProcessing

3:

S.AddChild(NewChild)

4:

end for

5:

return S

减，即r = cR，其中 r为子枝半径，R是父枝半径，c为一个线性倍数，这个倍
数可以固定，也可以进行随机的扰动从而增进多样性。Leonardo da Vinci在经
过大量观察后总结出了一种更符合自然规律的树木父子枝直径的关系公式：
∑︀
D2 = n di2 ，其中D为父枝直径，di 为第 i个子枝的直径，n为子枝的数量。这
i=1
个公式被广泛地用于树木枝干的半径模拟。
区别于基于规则的半径生成方法，本文为了进一步提升真实感，选择在进
行骨架抽取的同时，同样进行半径抽取的方法。注意，用该方法的前提是点云
分布须均匀化，然而基于图像进行三维重建得到的树木点云会呈现表皮化的现
象，这是由于图片上的点都是树木的表皮点，所以在得到三维点云后，是需要
进行一些修复工作的，本文用随机点填充的方法对该点云模型进行了实心化的
修复。当点云分布满足均匀化时，在对某个骨架进行拟合之后，对于拟合出来
的直线，来计算所有参加拟合该直线的点到该直线的平均距离Davg ，然后就可
以计算该骨架的半径R = Davg * 2。由于点云分布均匀，所以半径显然就是平均
距离的2倍。该算法的伪代码在算法表5中给出。

insertplace...实验图片对比图(线性、2次方、平均距离)

4.3 基于枝干合并的轻量化处理
用基于多方向迭代与步长探索得到的三维树木骨架通常是很细致和准确的，
尽管它相对于用3DSMAX等建模工具手工建模得到的面片模型已经大大的轻量
化了。但是如果应用是用于大规模的树木建模，那么我们有必要根据应用需求
进一步进行轻量化处理。

19

同济大学 工学硕士学位论文 你的标题

Algorithm 5 骨架半径抽取
Input: 拟合出的当前骨架直线L
Input: 当前骨架的点集S
Output: 当前骨架半径R
1:

初始化距离和D sum = 0

2:

for all 空间点P ∈ S do
点到直线距离D sum + = CalculateDistance(P, L)

3:
4:

end for

5:

平均距离Davg = D sum /S.Count

6:

骨架半径R = Davg * 2

7:

return R

4.3.1

L-System的尝试

4.3.1.1

L-System简介

L-System是一种并行的重写系统和正规语法，它的结构可以用可以定义为
一个3元组:

M = (V, ω, P)
其中：
∙ V(字母表) 表示可以被替代的字符的集合。
∙ ω(初始串) 表示L-System的初始状态。
∙ P(规则集合) 表示一系列的衍生规则。
L-System可以根据这三个组成部分的不同而递归地产生形态各异的字符串。由
于L-System具有递归生长的特性，因此我们可以用L-System规则来表达一个具
有自相似形态或者分形结构的物体，比如本文所研究的对象——树木。
4.3.1.2 树木模型的参数化L-System规则抽取

球面海龟几何的提出，用参数化的L-System规则描述了树木的结构信息。
在球面海龟几何中，节点的空间几何信息用4个量(长度l、半径r、父子枝夹
角θ和水平转角φ）和4个扩展符号(+、-、&、∧)来表示：
∙ +(l) 表示以当前位置为起点，在当前方向上前进l单位个长度

20

第 4 章 基于图像树木轻量化建模的若干算法

∙ !(r) 表示设置当前节点半径为r
∙ &(θ) 表示设置父子枝夹角为θ
∙ ∧(φ) 设置水平偏角为φ
在球面海龟几何中，将每个骨架节点生成一条参数化的L-System规则，形如：

N(l, r) → &(θ0 )∧(φ0 )!(r)+(l)S 0 (l*a0 , r*b0 )...&(θn )∧(φn )!(r)+(l)S n (l*an , r*bn ) (4.11)
其中N表示当前枝条，S 0 S n 表示当前枝条的n个子枝条，ai bi 分别表示第i个
子枝条与当前枝条的长度比和半径比，θi φi 分别表示第i个子枝条与当前枝条的
空间夹角和水平偏角。
4.3.1.3 使用L-System进行树木轻量化建模遇到的问题

在用参数化L-System进行树木轻量化建模时，在进行规则归纳时，有个难
以克服的问题。考虑将规则4.11中的a0 换成a′ ，则规则变成一个完全不同的规
0
则。这意味着对于两个分支规则，这两个规则中的子枝的长度，半径，转交，
偏角等必须完全相等才能归纳为同一个规则。而对于自然界中形态结构复杂的
树木，每个分支规则几乎不可能完全等同于另一个规则。
对上面的问题有一种解决方法就是将参数区间化，将属于同一区间的参数
的值视为相同。比如我们可以将父子枝间的转角分为18个区间，每个区间的大
小为10度。但是经过分析就可以察觉，这并没有从根本上解决这个问题。假设
我们将这4个变量都各自划分为10个区间，那么规则总数最多可以有10000个，
而且在这种情况下，两个规律相同的几率也是非常小的。如果我们将分区数量
减少，则又有可能将本来差异比较大的规则归纳为一个规则，不符合真实感的
要求。
所以，经过分析，这种用参数化L-System进行树木轻量化建模的方法并不
适用于从骨架中去抽取规则，而是适用于反向地用其描述的规则去产生一棵树，
如台湾学者戴文凯就对单棵树的L-System 规则进行随机扰动而轻量化的建模出
了整片森林。

4.3.2

树木轻量化？枝干合并！

用L-System的方法抽取规则所产生的问题，从本质上看，是由于自然界中
的树木形态太复杂和多变。与其从一个本就不规则生长的事物中去抽取规则，
还不如直接地在其逻辑结构上进行一系列的轻量化操作。本文提出了对已抽取

21

同济大学 工学硕士学位论文 你的标题

(a) 输入树枝骨架

(b) 合并AB、BC

(c) 合并AC、CD

图 4.3 树枝简化过程

的树木骨架中对视觉影响不大的部分进行合并的方法，从而在尽可能保证模型
的视觉效果的基础上，进一步地减小树木模型的体积，使得其能更广泛地应用
到WebVR、WebGame 等各个领域。
树枝的结构其实只由核心的一些枝干组成，其他的枝干只是对其结构进行
微调。所以在要求进一步轻量化的前提下，本文提出了分别从纵向和横向对树
枝进行合并的方法，以去掉一些只是起到微调作用的枝干。这种方法在尽可能
保证真实感不过多丢失的前提下对树枝进行简化操作，以适应更广泛的Web应
用领域。
纵向合并表示从父到子，从根到页进行纵向递归式的合并。若当前节点
与其父节点和子节点的夹角小于所设定的阈值，那么则将该节点去掉，并将
其子节点连接到其父节点。注意，若该节点的子节点数目不只一个，那么我
们不对它进行合并操作，因为将该节点的所有子节点加到该节点的父节点上
去有违真实感。图4.3展示了树枝纵向合并过程。图4.3(a)为输入的树枝骨架，
并且当前节点为B，其父节点为A，且只有唯一的子节点C。设合并角度阈值
为α，假设AB,BC之间的夹角b小于合并阈值α，那么将B剔除，并将C作为 A的
子节点。同理，在图4.3(b)中，若夹角c小于阈值α，那么也将AC 和CD合并。在
图4.3(c)中，由于节点D有两个孩子，所以不对其进行合并操作。
纵向合并算法的伪代码在算法表6中给出。
横向合并指的是对叶子节点和与其夹角小于阈值的兄弟节点进行合并。之
所以只对叶子节点进行合并，是因为非叶子节点下面都有若干棵子树，若对它
们进行合并，必须对它们下面的子树也进行合并。而合并子树显然就使得真实
感下降很大，因为这不只是局部微调，而是若干子树的变动。横向合并的伪代
码在算法表7中给出。

22

第 4 章 基于图像树木轻量化建模的若干算法

Algorithm 6 纵向合并枝干
Input: 纵向合并角度α
Input: 当前节点N
Output: None
1:
2:

for all 节点N ′ ∈ N.Children do
while N ′ .ChildCount = 1 do

3:

u ← N ′ .Position − N.Position

4:

v ← N ′′ .Position − N ′ .Position

5:

u·v
γ ← cos−1 ( |u|·|v| )

6:

if γ < α then

7:

N.child ← N.AddChild(N ′′ )

8:

N.child ← N.DeleteChild(N ′ )
end if

9:

N ′ ← N ′ .FirstChild

10:
11:

end while

12:

end for

13:

if N.ChildCount > 1 then

14:

for all 节点N ′ ∈ N.Children do
以N ′ 为当前节点递归调用该函数

15:
16:
17:

end for
end if

23

同济大学 工学硕士学位论文 你的标题

Algorithm 7 横向合并枝干
Input: 初始化横向合并角度β
Input: 设定当前节点N
Output: None
1:

for all 节点对P ∈ N.Children do

2:

N1 ← P.FirstNode

3:

N2 ← P.S econdNode

4:

if N1 .ChildCount = 0 ∧ N2 .ChildCount = 0 then

5:

u ← N1 .Position − N.Position

6:

v ← N2 .Position − N.Position

7:

u·v
γ ← cos−1 ( |u|·|v| )

8:

if γ < β then
New Node N ′

9:
10:

N ′ .Position ← (N1 .Position + N2 .Position)/2

11:

N ′ .Radius ← max(N1 .Radius, N2 .Radius)

12:

N.child ← N.DeleteChild(N1 )

13:

N.child ← N.DeleteChild(N2 )

14:

N.child ← N.AddChild(N ′ )

15:

退出循环并以当前节点N重新调用该函数

16:
17:

end if
end if

18:

end for

19:

for all 节点P ∈ N.Children do

20:
21:

以P为当前节点递归调用该函数
end for

24

第 4 章 基于图像树木轻量化建模的若干算法

(a) 输入枝
干骨架

(c) 横向合
并DE,DF

(b) 纵向合
并AC,CD

(d) 纵向合
并AD,DE

图 4.4 联合使用纵向和横向合并

纵向合并和横向合并单独使用时都具有很大的局限性，因为纵向合并只
能对具有单个孩子并且没有兄弟的节点进行纵向递归地调用，而横向合并又
只能对叶子节点进行兄弟级别的合并。但是将两种合并方法联合使用，将可
以从整体上对树木进行微调操作，图4.4对这一想法进行了演示。4.4(a)中经过
纵向的AC,CD合并得到4.4(b)。 4.4(b)中由于D有两个子节点，无法进行纵向合
并，所以考虑进行横向合并DE,DF，并得到4.4(c)。最后进行一次纵向合并得
到4.4(d)。

4.4 建模还原度
对于一个通过建模获得的树木模型，如果没有一个客观的量化评价指标，
就无法从客观的角度反馈树木模型的还原度和各个步骤算法的可行性。对于本
文的基于图像序列的树木建模方法，建模的输入是在自然环境下拍摄的树木图
片序列，输出是三维的骨架模型。因此，判断三维模型和投影照片的相似程度
是评价建模质量的核心。然而，大多数基于图像的树木建模论文 [8–11,19] 只给出
了输入图片和建模结果在少量角度的渲染效果，试图让观察者从肉眼观察其相
似度。但是这种方法是主观的，因观察者的不同可能会有不同的评价结果，这
显然不是一个好的评价方法。
为了客观、量化地评价基于图像序列的建模质量，本文提出了一套完整的
评价方法。然而，仅仅凭借照片无法完全表达出其所在环境的信息，比如环境
光照，因为遮挡而产生的阴影信息等，因此本文的评价方法将不针对模型的纹
理和颜色信息，仅仅对模型的几何信息和照片中的几何信息的匹配程度进行量
化分析。
设树木模型M由n张从不同角度拍摄的同一棵树的图片序列I1 ∼ In ，经过基
于图像的三维重建，骨架抽取的方法进行建模所获得。那么模型M的建模还原

25

同济大学 工学硕士学位论文 你的标题

度Q定义如下：
定义 4.1：
Q = I · R3d · Rs
建模还原度Q的取值范围为[0, 1]，0表示没有还原出任何树木几何信息，
1表示准确还原出整棵树木的几何信息。
本文将建模还原度Q考虑由3个部分组成，为此也引入了三个新的概念：图
片序列信息量I，三维重建还原度R3d ，以及骨架抽取还原度Rs 。这三个分量的
取值范围都为[0, 1]，它们的乘积即为总的建模还原度Q。后续小节会详述这三
个分量。

4.4.1

图像序列信息量

当实地对树木进行多角度拍摄时，拍摄者将基于不同的水平角度对树木进
行全方位的拍摄，以便将整棵树的信息尽可能多的携带进图像序列中。然而，
从客观上来看，怎么样的图片序列才更加完整的表达了整棵树的几何特征？为
了从客观和量化的角度给出树木图像序列所携带的树木信息的多少，本文引入
了图像序列信息量的概念。
那么，到底怎样的图片序列携带的信息量更大呢？从拍摄过程分析，如果
想要得到一棵完整的树木信息，那么需要绕着一棵树一圈进行密集地拍摄。这
里的一圈，用数学化的表示，就是360∘ ，如果只是绕半圈进行拍摄，那么所得
到的图片序列表达的树木信息必定是不完整的，所以角度对信息量有着很大的
贡献。另一方面，如果每隔60∘ 进行一次拍摄，和每隔30∘ 进行一次拍摄，在它
们都绕圈拍摄的前提下，后者的图片序列所含信息量必然更大。再进一步思考，
如果我隔360∘ , 180∘ , 90∘ , ..., 1∘ 进行拍摄呢？那么后一次拍摄所得的图片序列相比
前一次的图片序列信息量的增长是相同的吗？答案是否定的，因为当图片很少
时，三维重建的结果也不好，这时增加图片数量是能够很大程度上改观三维重
建的重量的，因此此时的信息量增长速度快。但是在拍摄已经比较密集的情况
下，后一次拍摄所增加的信息量必定只是一些细节的信息，所以，信息量增长
的速率应该变小。并且一个信息量大的图片序列应该满足以下三个要求：
∙ 图片数量多：图片数量多也就意味着拍摄角度多，因为一张图片代表着一
个角度。
∙ 角度跨度大：跨度大指需要对树木进行全方位的拍摄。
26

第 4 章 基于图像树木轻量化建模的若干算法

∙ 角度分布均匀：若图片只是密集的集中在一个角度区间，就算图片再多，
也无法完整地表达整棵树的信息，所以若在角度多和跨度大的情况下还满
足分布均匀，那么就能很完整地携带树木的信息。
由于从平面的2D图像很难得到其空间角度拍摄情况，因此在这里我们简化
其定义，将关注点放在图片数量上来，对于图片跨度和角度的均匀分布，我们
默认拍摄者在拍摄过程中采用均匀的角度偏差来进行360∘ 的拍摄。
根据以上的分析，本文给出了图像序列信息量的数学定义如下：
定义 4.2：
a
I = 1 − ( )n
b
其中，图片序列信息量I的取值范围为[0, 1]。当I = 0时表示图片序列并不包
含树木信息，当I = 1时表示图片序列能完全表达空间树木的几何信息。a, b都是
正数且a < b，具体数值需要对不同树木进行实验之后才能得到。尽管a和b因树
木特点不同而不同，但是它始终满足前文提出的信息量增长速度的特点，即先
快后慢。

4.4.2

三维重建还原度

对于一个给定的图片序列，所用三维重建方法所得到的点云模型的与实际
的树木在几何形状上的相似度如何，由三维重建还原度R3d 来定义。注意，实际
树木的几何信息被记录在输入的图像序列中，所以想要计算点云模型和实际树
木的相似度，就需要对点云模型和图片序列进行比较。然而对于三维的点云信
息和二维的图片信息，无法进行直接地比较。一个比较直观的想法，是对三维
的点云进行投影，投影的角度由三维重建过程中的照相机几何标定步骤给出。
由于不考虑模型纹理和颜色信息，在空间点被投影到平面以后，只关注其
是否在对应角度图片的树木轮廓内。所以对输入的树木图片序列，需要先获得
其轮廓图，并将其转化为二值图像。树木上的点值为1，而树木外的点值为0。
对于每一个点云模型中的点，按对应角度投影，获得其在对应图片上的坐标值，
并且在其二值图像上确定其值，若为1，则表明匹配成功，否则匹配失败。最后
统计出匹配成功的总的比例，作为三维重建的还原度。
根据以上分析，本文给出三维重建还原度的数学定义式：

27

同济大学 工学硕士学位论文 你的标题

定义 4.3：
n

1 ∑︁ Pi
n i=1 Pi + Oi

R3d =

上式中的n表示图像的数量，Pi 表示点云模型投影到第i张图片上在树木轮
廓中的点的数量，Oi 表示点云模型投影到第 i张图像上在树木轮廓外的点的数
量，因此Pi + Oi 自然就表示点云模型中点的总数量。 PiPi i 表示点云投影到第i张
+O
图片上的击中率。最后对每张图像的击中率求平均，作为总的三维重建的还原
度。其值区间为[0, 1]。

4.4.3

骨架抽取还原度

骨架抽取是基于三维点云模型进行的，因此计算骨架抽取的还原度的输入
是重建出的点云模型和抽取出的骨架模型。由于点云模型是三维的点的集合，
而抽取出的骨架模型却是一个记录着树形结构的逻辑信息，它们无法进行直接
的比较。本文采取的做法是将骨架的树形逻辑信息用圆台和球进行堆叠从而将
其转化为三维的表示。
具体的做法是对骨架中的每个节点，根据其半径构造出一个球体。然后对
于每个父子关系，用一个圆台来表示其枝干，圆台的底半径等于父节点的半径，
圆台的顶半径等于子节点的半径。然后对于每个点云模型中的点，用数学公式
判断其是否存在于骨架的三维表示中的球体或圆台中，如果存在，则表示匹配
成功，否则表示匹配失败。最后用成功点数与总点数的比值来表示骨架抽取的
还原度。定义如下：
定义 4.4：
Rs =

S
N

其中S 表示匹配成功的点数，而N表示点云模型的总点数。Rs 的值区间
为[0, 1]。
注意，若用经过枝干合并轻量化处理的骨架进行骨架抽取还原度计算，其
值必定会比直接从点云中抽取出来的模型要小，因为模型经过简化后，与原点
云模型的匹配度也必将降低。本文的目标只是尽可能在还原度降低不多的情况
下，对骨架进行尽可能多的轻量化。

28

第 4 章 基于图像树木轻量化建模的若干算法

4.4.4

建模还原度计算

将图片序列信息量I、三维重建还原度R3d 和骨架抽取还原度Rs 代入建模还
原度Q 的定义式中，可以得到建模还原度的计算式：
n

a
S
1 ∑︁ Pi
Q = (1 − ( )n ) ·
·
b
n i=1 Pi + Oi N

(4.12)

4.5 本章小节
本章具体阐述了基于图像树木轻量化建模所涉及的一些算法。
首先介绍了光流法的由来，并且分析了LK光流法的思想和特点，然后介绍
了基于图像金字塔的PyrLK光流法，这种方法用图像金字塔这种多分辨率图像
层来克服图像中的大块运动，是LK光流法的一种优化与实现。接着提出了改进
的PyrLK光流法，该算法把PyrLK的局部平移假设扩展到了局部仿射变换假设，
并且加入了特征反向追踪，以提高算法鲁棒性，实现了高精度的匹配。
三维体素泛洪是计算机图形学中二维像素泛洪的扩展，它将三维体素按洪
水泛滥一般进行空间的扩展。本文利用三维体素泛洪实现了节点对邻域的探索，
并在该邻域的范围内对方向进行分割，将每个分割方向上的点集根据最小二乘
法进行拟合，得出该方向上骨架具体的直线方程。然后根据点集内点到对应直
线方程的距离大小，算出该骨架的半径大小。从而得到具有半径信息的骨架结
构。
在得到骨架结构后，为了迎合轻量化的应用，本文对其进行轻量化操作。
本文首先对传统的轻量化方法L-System进行了尝试，运用参数化的L-System规
则进行规则抽取，但是由于现实中树木的复杂性与不规则性，抽取出来的规则
太多，以至于违背了轻量化的原则。于是本文提出了基于枝干合并的轻量化方
法，分别从纵向和横向对树木枝干进行合并，以达到轻量化的目标。
本章的最后，本文还提出了基于图像树木轻量化建模的质量评价方法。提
出了建模还原度的概念，它包含了三个子项：图像序列信息量、三维重建还原
度以及骨架抽取还原度。它们分别代表了图像序列对真实树木的信息携带量、
点云模型和图像序列的匹配度和骨架模型与点云模型的匹配度。本文对这三个
子项的由来和计算方法都进行了阐述，并将它们融合给出了建模还原度的计算
式。

29

同济大学 工学硕士学位论文 你的标题

第 5 章 实验过程与分析
5.1 实验环境
对于前面提出的基于图像的树木轻量化建模方法，本文做了大量实验
验证了其可行性。本文使用的拍摄工具是高分辨率安卓手机索尼LT26ii，该
手 机 最 高 分 辨 率 能 达 到4000x3000，已 经 足 够 实 验 的 需 求。拍 摄 地 点 为 同
济 大 学 嘉 定 校 区 以 及 某 住 宅 小 区。本 文 实 验 所 使 用 计 算 机 操 作 系 统 平 台
为XUbuntu 12.04，CPU为双核Intel(R) Core(TM) i5-3230M @ 2.60GHz。显卡为
NVidia GeForce GT750M。所有实验程序均使用C/C++语言完成，使用g++编译
器进行编译，同时使用OpenGL version 4.3图形硬件接口来完成可视化工作。

5.2 实验结果与分析
本文以三棵树的建模结果作为展示和分析的依据，其中第一棵树拍摄帧数
为20帧，见图5.1。第二棵树的拍摄帧数为12帧，见图5.2。第三棵树的拍摄帧数
为20帧，见图5.3。
本文还给出了每个图片序列三维重建出的点云模型、从点云模型中直接抽
取的骨架模型以及经过枝干合并方法轻量化得到的骨架模型。为了从直观上比

图 5.1 树木1图像序列，帧数为20帧，拍摄地点为某住宅小区
30

第 5 章 实验过程与分析

图 5.2 树木2图像序列，帧数为12帧，拍摄地点为同济大学嘉定校区

图 5.3 树木3图像序列，帧数为20帧，拍摄地点为同济大学嘉定校区

31

同济大学 工学硕士学位论文 你的标题

较重建模型和图片序列的相似度，本文从正面和侧面对所得模型进行投影，以
方便从二维的视角判断其相似程度。图5.4和图5.5分别给出了树木样本1在正面
投影和侧面投影的比对情况。图5.6和图5.7分别给出了树木样本2在正面投影和
侧面投影的比对情况。图5.8和图5.9分别给出了树木样本3在正面投影和侧面投
影的比对情况。

32

第 5 章 实验过程与分析

(a) 树木正面图像

(b) 树木点云模型

(c) 树木骨架模型

(d) 树木轻量化骨架模型

图 5.4 树木样本1正面投影比对

33

同济大学 工学硕士学位论文 你的标题

(a) 树木侧面图像

(b) 树木点云模型

(c) 树木骨架模型

(d) 树木轻量化骨架模型

图 5.5 树木样本1侧面投影比对
34

第 5 章 实验过程与分析

(a) 树木正面图像

(b) 树木点云模型

(c) 树木骨架模型

(d) 树木轻量化骨架模型

图 5.6 树木样本2正面投影比对

35

同济大学 工学硕士学位论文 你的标题

(a) 树木侧面图像

(b) 树木点云模型

(c) 树木骨架模型

(d) 树木轻量化骨架模型

图 5.7 树木样本2侧面投影比对

36

第 5 章 实验过程与分析

(a) 树木正面图像

(b) 树木点云模型

(c) 树木骨架模型

(d) 树木轻量化骨架模型

图 5.8 树木样本3正面投影比对

37

同济大学 工学硕士学位论文 你的标题

(a) 树木侧面图像

(b) 树木点云模型

(c) 树木骨架模型

(d) 树木轻量化骨架模型

图 5.9 树木样本3侧面投影比对

38

第 5 章 实验过程与分析

可以看出，无论从正面还是侧面，通过本文轻量化建模方法所得到的树木
模型都具有很高的还原性。由于树木1和树木的细小枝干比较多，所以对于其
细节部分的还原度还有待提升。但是类似树木3这种不含太多细小枝干的树木，
本文可以给出很高的还原度。从另一方面来看，由于本文的方法是轻量化建模，
对于细小的枝干的舍弃也是无法避免的，所以从总体来看本文的方法对于真实
树木的轻量化建模效果还是十分客观的。
表5.1分别对图片序列信息量、三维重建还原度、骨架抽取还原度以及总的
还原度给出了量化的实验计算结果。注意，图片序列信息量的计算，本文根据
实验所得的最佳a/b = 0.8的结果来进行计算。从表中可以看出，树木样本3的还
原度最高，而树木样本2的还原度最低。分别比较它们的三维重建还原度和骨架
抽取还原度可以看出，图片数量的越多，样本结构越简单，则三维还原度的还
原度就越高。而对于树木结构复杂的树木，骨架抽取是一个难点，因为树木分
支结构的复杂性容易引起骨架抽取的二义性从而导致抽取不准确，所以对于样
本3这样结构简单的树木来说，骨架抽取还原度最高，而对于结构最复杂，细枝
最多的样本2来说，骨架抽取还原度最低。

表 5.1 树木样本还原度统计
树木样本

图片序列信息量

三维重建还原度

骨架抽取还原度

总还原度

1
2
3

0.988
0.931
0.988

0.892
0.849
0.935

0.871
0.852
0.953

0.767
0.673
0.881

表5.2从轻量化的角度，对比了三个树木样本从三维重建得到的点云数据
文件的体积、骨架抽取后得到的文件体积和经过轻量化以后得到的文件体积。
从表中可以看出，三个样本从点云数据到骨架数据体积都大大的减小了，对于
以KB为单位的骨架体积，已经可以普及到一般的 Web应用来。对于后一步轻
量化的步骤，主要是为了满足更高的应用需求，可以看出，对于骨架结构中细
枝较多的样本1和样本2，其轻量化所减小的模型体积比例要大于结构简单的样
本3，这是因为模型的轻量化主要是建立在对树木结构进行简化，而本来就比较
简单的结构，这种轻量化的程度就会减弱。

39

同济大学 工学硕士学位论文 你的标题

表 5.2 树木建模各阶段文件体积对比
树木样本

三维重建点云体积

原骨架体积

轻量化骨架体积

1
2
3

2.5M
4.4M
2.2M

50.3K
103.1K
31.5K

8.2K
15.1K
7.3K

5.3 本章小节
本章首先交代了本文所进行实验的软硬件平台等实验环境。然后给出了3个
样本的实验结果，从模型正面和侧面进行投影并从直观上比较了重建模型与输
入图像序列的相似度。然后进一步运用前一章给出的建模还原度的计算式，对
三个样本进行了量化的计算，并分析了影响建模还原度的一些因素。最后给出
了3个样本重建模型的轻量化数据，并基于该分析了影响树木模型轻量化的一些
因素。从最后的实验结果，我们可以看出，本文提出的基于图像的轻量化建模
方法具有可行性和十分客观的重建效果。

40

第 6 章 总结与展望

第 6 章 总结与展望
6.1 总结
本文首先总结了国内外树木建模工作者的技术与方法，并分析了它们的优
缺点。为了得到真实感强的树木模型，本文从改进了传统三维重建中的匹配算
法。使得PyrLK算法适应了仿射变换和容错机制，从而成功地提高了三维重建
的准确性和鲁棒性。然后进一步对三维重建得到的点云模型体素化，并用基于
三维体素泛洪和拟合的办法抽取出树木的骨架拓扑结构。然后根据枝干骨架的
纵向合并和横向合并，对树木骨架进行分级的轻量化。在本文的最后，提出了
一种基于图像序列树木建模的还原度计算方法，作为其建模的质量评价的量化
标准。
本文提出的树木建模方法先从准确三维重建方法入手，该方法可以获得极
高还原度的点云。并且基于该点云模型，进行符合树木生长特性的骨架抽取，
得到的骨架还原度也极高。在高还原度的骨架的基础上，本文提供了枝干合并
的轻量化处理办法，因此可以对树木进行分级别的建模，从精确的模型到极度
轻量化的模型，该方法可以支持一系列级别跨度的应用。无论是桌面要求精细
树木模型的应用，还是嵌入式，Web等要求轻量化树木模型的应用，本文的方
法都可以很好的满足它们的要求。

6.2 未来的工作
本文方法的未来发展方向如下：
1. 本文采取的建模输入是图像序列，要让拍摄者密集地对图像进行拍摄，
是很不方便的。因此未来可以考虑将视频作为输入，这样围绕树一圈拍一个视
频将会比密集拍照要方便的多。而且视频中的相邻帧之间的密集程度也会比图
像大，从而使得三维重建更加准确。
2. 本文使用三维重建的方法是基于树木图片进行点云重建，所重建的点云
呈现表皮化。虽然经过三维的点云修复，但是这种点云修复是带有人为主观性
和二义性的，究其原因还是受缚于基于点云的操作的复杂性。对于本身几何连

41

同济大学 工学硕士学位论文 你的标题

续的树木来说，未来将尝试基于三维体素泛洪的三维重建，使得三重重建出来
的结果就是连续的体素，而不是空心的点云，以便于后续处理。
3. 本文只是做了单棵树木的轻量化工作，未来可以考虑将其扩展为基于单
棵树木轻量化骨架形式而随机扰动形成森林，以适应大规模树木轻量化建模的
要求。

42

同济大学 工学硕士学位论文 参考文献

参考文献
[1]
[2]
[3]

[4]

[5]

[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]

[16]
[17]
[18]
[19]

Lindenmayer A. Mathematical models for cellular interaction in development: Parts I and
II. Journal of Theoretical Biology, 1968, 18.
Prusinkiewicz P, Lindenmayer A. The algorithmic beauty of plants. New York, NY, USA:
Springer-Verlag New York, Inc., 1990.
Prusinkiewicz P, Lindenmayer A, Hanan J. Development models of herbaceous plants for
computer imagery purposes. Proceedings of the 15th annual conference on Computer graphics and interactive techniques, New York, NY, USA: ACM, 1988. 141–150.
Anastacio F, Prusinkiewicz P, Sousa M C. Sketch-Based Interfaces and Modeling (SBIM):
Sketch-based parameterization of L-systems using illustration-inspired construction lines
and depth modulation. Comput. Graph., 2009, 33(4): 440–451.
Reﬀye P, Edelin C, Francon J, et al. Plant models faithful to botanical structure and devel¸
opment. Proceedings of the 15th annual conference on Computer graphics and interactive
techniques, New York, NY, USA: ACM, 1988. 151–158.
Reche-Martinez A, Martin I, Drettakis G. Volumetric reconstruction and interactive rendering of trees from photographs. ACM Trans. Graph., 2004, 23(3): 720–727.
Neubert B, Franken T, Deussen O. Approximate image-based tree-modeling using particle
ﬂows. ACM Trans. Graph., 2007, 26(3).
Quan L, Tan P, Zeng G, et al. Image-based plant modeling. ACM SIGGRAPH 2006 Papers,
New York, NY, USA: ACM, 2006. 599–604.
Tan P, Zeng G, Wang J, et al. Image-based tree modeling. ACM SIGGRAPH 2007 papers,
New York, NY, USA: ACM, 2007.
Tan P, Fang T, Xiao J, et al. Single image tree modeling. ACM Trans. Graph., 2008, 27(5):
108:1–108:7.
Li C, Deussen O, Song Y Z, et al. Modeling and generating moving trees from video. ACM
Trans. Graph., 2011, 30(6): 127:1–127:12.
Verroust A, Rocquencourt I, Lazarus F. Extracting Skeletal Curves from 3D Scattered Data.
The Visual Computer, 1999, 16: 15–25.
Bucksch A. SKELETONIZATION AND SEGMENTATION OF POINT CLOUDS USING
OCTREES AND GRAPH THEORY, 2006.
Xu H, Gossett N, Chen B. Knowledge and heuristic-based modeling of laser-scanned trees.
ACM Trans. Graph., 2007, 26(4).
Cˆ t´ J F, Widlowski J L, Fournier R A, et al. The structural and radiative consistency of threeoe
dimensional tree reconstructions from terrestrial lidar. Remote Sensing of Environment,
2009, 113(5): 1067 – 1081.
Horn B K P, Schunck B G. Determining Optical Flow. ARTIFICAL INTELLIGENCE,
1981, 17: 185–203.
Lucas B D, Kanade T. An Iterative Image Registration Technique with an Application to
Stereo Vision. 1981. 674–679.
Bouguet J. Pyramidal implementation of the Lucas Kanade feature tracker. Intel Corporation, Microprocessor Research Labs, 2000..
Liu J, Zhang X, Li H, et al. Creation of tree models from freehand sketches by building 3D
skeleton point cloud. Proceedings of the Entertainment for education, and 5th international
conference on E-learning and games, Berlin, Heidelberg: Springer-Verlag, 2010. 621–632.

43

